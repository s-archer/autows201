---

#------------------------------------------------------------------------------
# Start tasks
#------------------------------------------------------------------------------


# Bug in Ansible 'aws_secret' module, so using AWS CLI command instead
- name: GET PASSWORD FROM AWS SECRET STORE
  shell: "aws secretsmanager get-secret-value --secret-id my_bigip_password"
  register: aws_secret
  delegate_to: localhost


- name: TEST AWS SECRET
  debug: 
    msg: "{{ aws_secret }}"


- name: GET PASSWORD FROM STDOUT
  set_fact:
    aws_secret: "{{ aws_secret.stdout | from_json | json_query('SecretString')  }}"    


- name: TEST AWS SECRET
  debug: 
    msg: "{{ aws_secret }}"


- name: OUTPUT EC2 INSTANCE NETWORK INTERFACES
  debug: 
    msg: "{{ aws_pub_eni_id }}"


- name: UPDATE EXITSING PUBLIC ENI WITH SECONDARY IPS
  ec2_eni:
    eni_id: "{{ aws_pub_eni_id }}"
    state: present
    secondary_private_ip_address_count: 2

    
- name: GET UPDATED ENI FACTS
  ec2_eni_facts:
    filters:
      network-interface-id: "{{ aws_pub_eni_id }}"
  register: ec2_eni_facts


# Used this to check correct syntax for determining the subnet next-hop for the default route in the do_base.j2
#- name: FIND DEFAULT GATEWAY
#  debug:
#    msg: "{{ ec2_eni_facts.network_interfaces[0].private_ip_addresses[0].private_ip_address | ipsubnet(24) | ipaddr('next_usable') }}"


- name: OUTPUT ALL PRIVATE IPS ASSOCIATED WITH THE ENI
  debug:
    msg: "Private IP {{ index }}: {{ item.private_ip_address }}"
  loop: "{{ ec2_eni_facts.network_interfaces[0].private_ip_addresses }}"
  loop_control:
    index_var: index


# There is an Ansible bug with this task, so we have to allocate new EIPs and then, separately
# associate with the secondary IPs, in the next two blocks.
#- name: ALLOCATE NEW EIPS AND ASSOCIATE WITH ENI SECONDARY IPS
#  ec2_eip:
#    device_id: "{{ aws_pub_eni_id }}"
#    private_ip_address: "{{ item.private_ip_address }}"
#    in_vpc: yes
#    allow_reassociation: yes
#    release_on_disassociation: yes
#  loop: "{{ ec2_eni_facts.network_interfaces[0].private_ip_addresses }}"


- name: ALLOCATE NEW EIP FOR EACH PRIVATE IP ON THE ENI
  ec2_eip:
    state: 'present'
  register: eip2
  loop: "{{ ec2_eni_facts.network_interfaces[0].private_ip_addresses }}"


- name: ASSOCIATE EIPS TO ENIS
  ec2_eip:
    public_ip: "{{ eip2.results[index].public_ip }}"
    device_id: "{{ aws_pub_eni_id }}"
    private_ip_address: "{{ item.private_ip_address }}"
    in_vpc: true 
  loop: "{{ ec2_eni_facts.network_interfaces[0].private_ip_addresses }}"
  loop_control:
    index_var: index


- name: GET UPDATED ENI FACTS
  ec2_eni_facts:
    filters:
      network-interface-id: "{{ aws_pub_eni_id }}"
  register: ec2_eni_facts


- name: OUTPUT ALL PUBLIC AND PRIVATE IPS ASSOCIATED WITH THE ENI
  debug:
    msg: "Private IP {{ index }}: {{ item.private_ip_address }} -- Public IP: {{ item.association.public_ip }}"
  loop: "{{ ec2_eni_facts.network_interfaces[0].private_ip_addresses }}"
  loop_control:
    index_var: index


#------------------------------------------------------------------------------
# End tasks
#------------------------------------------------------------------------------
...